/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { ArbiGates, ArbiGatesInterface } from "../ArbiGates";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "gateId",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "address",
        name: "creator",
        type: "address",
      },
    ],
    name: "Created",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "_conditions",
        type: "bytes",
      },
    ],
    name: "add",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "conditions",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x60806040526000805534801561001457600080fd5b506105a4806100246000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c806326c500071461003b578063ba6581111461006b575b600080fd5b61005560048036038101906100509190610284565b610087565b604051610062919061034a565b60405180910390f35b610085600480360381019061008091906103d1565b610127565b005b600160205280600052604060002060009150905080546100a69061044d565b80601f01602080910402602001604051908101604052809291908181526020018280546100d29061044d565b801561011f5780601f106100f45761010080835404028352916020019161011f565b820191906000526020600020905b81548152906001019060200180831161010257829003601f168201915b505050505081565b81816001600080548152602001908152602001600020919061014a9291906101a1565b507f7757890bcab34d673dfca6b71df1b57f75a2fe4231d6e8de726caf534ab1fdd66000543360405161017e9291906104ce565b60405180910390a160008081548092919061019890610526565b91905055505050565b8280546101ad9061044d565b90600052602060002090601f0160209004810192826101cf5760008555610216565b82601f106101e857803560ff1916838001178555610216565b82800160010185558215610216579182015b828111156102155782358255916020019190600101906101fa565b5b5090506102239190610227565b5090565b5b80821115610240576000816000905550600101610228565b5090565b600080fd5b600080fd5b6000819050919050565b6102618161024e565b811461026c57600080fd5b50565b60008135905061027e81610258565b92915050565b60006020828403121561029a57610299610244565b5b60006102a88482850161026f565b91505092915050565b600081519050919050565b600082825260208201905092915050565b60005b838110156102eb5780820151818401526020810190506102d0565b838111156102fa576000848401525b50505050565b6000601f19601f8301169050919050565b600061031c826102b1565b61032681856102bc565b93506103368185602086016102cd565b61033f81610300565b840191505092915050565b600060208201905081810360008301526103648184610311565b905092915050565b600080fd5b600080fd5b600080fd5b60008083601f8401126103915761039061036c565b5b8235905067ffffffffffffffff8111156103ae576103ad610371565b5b6020830191508360018202830111156103ca576103c9610376565b5b9250929050565b600080602083850312156103e8576103e7610244565b5b600083013567ffffffffffffffff81111561040657610405610249565b5b6104128582860161037b565b92509250509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061046557607f821691505b6020821081036104785761047761041e565b5b50919050565b6104878161024e565b82525050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006104b88261048d565b9050919050565b6104c8816104ad565b82525050565b60006040820190506104e3600083018561047e565b6104f060208301846104bf565b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006105318261024e565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203610563576105626104f7565b5b60018201905091905056fea2646970667358221220d3fc622c416b3d85c9154a88f3775a6c9661b683b76fbd98dd2640df66c547e164736f6c634300080e0033";

type ArbiGatesConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ArbiGatesConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ArbiGates__factory extends ContractFactory {
  constructor(...args: ArbiGatesConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "ArbiGates";
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ArbiGates> {
    return super.deploy(overrides || {}) as Promise<ArbiGates>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): ArbiGates {
    return super.attach(address) as ArbiGates;
  }
  connect(signer: Signer): ArbiGates__factory {
    return super.connect(signer) as ArbiGates__factory;
  }
  static readonly contractName: "ArbiGates";
  public readonly contractName: "ArbiGates";
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ArbiGatesInterface {
    return new utils.Interface(_abi) as ArbiGatesInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ArbiGates {
    return new Contract(address, _abi, signerOrProvider) as ArbiGates;
  }
}
